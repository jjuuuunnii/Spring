스프링의 기본 개념

스프링 기술의 핵심 컨셉 - 왜만들었을까?

결국 - 좋은 객체 지향 애플리케이션을 개발할수 있게 도와주는 프레임 워크다 

좋은 객체 지향 프로그래밍은 뭘까?

유연하고 변경이 용이.
-> 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법
-> 바로 다형성!!!!!!!!!!!!!!!!!!  
-> 새로운 자동차가 나온다고 해도 운전자, 즉 클라이언트에게 영향을 미치지 않고 개발할수!! 이게 진짜 중요하다
-> 로미오라는 역할에 대해 장동건, 원빈이 구현을 했다, 즉 구현과 역할을 나눈것이야!!!!

-클라이언트는 대상의 인터페이스만 알면된다.
- 클라이언트는 구현대상의 내부 구조를 몰라도된다.
- 클라이언트는 구현대상의 내부구조가 변경되어도 영향을 받지 않느다.
- 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.


-역할 -인터페이스
-구현 -인터페이스를 구현한 클래스, 구현 객체
- 갤체 설계시 역할 을 먼저 부여하고 구현을 한다!!  

다형성의 본질,,

- 클라이언트를 변경하지 않고 , 서버의 구현기능을 유연하게 변경할수 있다,,!


좋은 객체 지향 설계의 5가지 원칙,,!!! (SOLID)!!!!

1. SRP- 단일책임원칙
-하나의 클래스는 하나의 책임만 가져야 한다. 변경이 적을수록 SRP를 잘 지켰다고 할수 있다.

2. OCP 개방-폐쇄 원칙
- 소프트웨어 요소는 확장에는 열려 있으나, 변경에는 닫혀있어야 한다. 결국 클라이언트는 변하면 안된다는 뜻이다!

3. LSP 리스코프 치환 원칙
- 인터페이스가 있고 구현체가 있을 때 기능적으로 그 이름에 맞게 구현해야 한다.

4. ISP 인터페이스 분리 원칙
- 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
ex) 자동차 인터페이스 -> 운전 인터페이스 ,정비 인터페이스로 분리 
    사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리

5. DIP 의존관계 역전 원칙
- 클라이언트 코드는 구현된 코드가 아니라 인터페이스 코드를 바라봐야한다,,!
-역할에 의존해야지, 구현에 의지하면 안된다,,!
-이때 의존한다는 것의 의미는 그 코드를 알고 있다라는 뜻이다.
-memberservice 클라이언트가 구현 클래스를 직접 선택,,,
- memverservice m = new memorymemberreopsitory();
DIP에 위반이다!!
-추상화에만 의존해야지 구체화에 의존하면 안된다,,!